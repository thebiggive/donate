version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5.1.0
  aws-ecr: circleci/aws-ecr@9.3.4
  aws-ecs: circleci/aws-ecs@4.1.0
  aws-s3: circleci/aws-s3@4.0.0
  browser-tools: circleci/browser-tools@1.4.8
  jira: circleci/jira@2.1.0
  slack: circleci/slack@4.14.0

jobs:
  test:
    resource_class: large
    docker:
      - image: cimg/node:20.13.1-browsers
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN

    working_directory: ~/donate

    steps:
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver

      - checkout

      - restore_cache:
          keys:
            - dependencies-with-chrome-{{ checksum "package-lock.json" }}-{{ checksum "src/app/node-version.spec.mjs"}}

      - run: npm install --quiet

      - save_cache:
          paths:
            - node_modules
            - /home/circleci/.cache/Cypress
            - /home/circleci/.cache/puppeteer
          key: dependencies-with-chrome-{{ checksum "package-lock.json" }}-{{ checksum "src/app/node-version.spec.mjs"}}

      - run: node --test src/app/node-version.spec.mjs

      - run: npm run ci

      - store_artifacts:
          path: cypress/screenshots

  deploy-regression-static:
    docker:
      # This image's base Node version must match that used in `Dockerfile`, which is the basis for ECS app
      # builds. Otherwise the two builds will have different output hashes and the dynamic app will reference
      # static files that don't exist. Always specify a 3-part version, even if it's x.x.0.
      # Remember to increment cache keys when upgrading Node too.
      - image: node:20.13.1
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN

    # This must also match `Dockerfile` to avoid risking out of sync static + ECS builds.
    working_directory: /usr/src/app

    steps:
      - checkout

      - restore_cache:
          keys:
            - dependencies-{{ checksum "package-lock.json" }}-{{ checksum "src/app/node-version.spec.mjs"}}
      - run: env PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true npm install --quiet
      - save_cache:
          paths:
            - node_modules
            - /home/circleci/.cache/Cypress
            - /home/circleci/.cache/puppeteer
          key: dependencies-{{ checksum "package-lock.json" }}-{{ checksum "src/app/node-version.spec.mjs"}}

      - run: npm run build:regression

      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY

      - aws-s3/sync:
          from: dist/browser
          to: 's3://tbg-regression-donate-static/d'
          arguments: '--acl public-read --cache-control "max-age=31536000"'

      - aws-s3/sync:
          from: dist/browser/assets
          to: 's3://tbg-regression-donate-static/assets'
          arguments: '--acl public-read --cache-control "max-age=86400"'

  deploy-production-static:
    docker:
      # This image's base Node version must match that used in `Dockerfile`, which is the basis for ECS app
      # builds. Otherwise the two builds will have different output hashes and the dynamic app will reference
      # static files that don't exist. Always specify a 3-part version, even if it's x.x.0.
      # Remember to increment cache keys when upgrading Node too.
      - image: node:20.13.1
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN

    # This must also match `Dockerfile` to avoid risking out of sync static + ECS builds.
    working_directory: /usr/src/app

    steps:
      - checkout

      - restore_cache:
          keys:
            - dependencies-{{ checksum "package-lock.json" }}-{{ checksum "src/app/node-version.spec.mjs"}}
      - run: env PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true npm install --quiet
      - save_cache:
          paths:
            - node_modules
            - /home/circleci/.cache/Cypress
            - /home/circleci/.cache/puppeteer
          key: dependencies-{{ checksum "package-lock.json" }}-{{ checksum "src/app/node-version.spec.mjs"}}

      - run: npm run build:production

      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY

      - aws-s3/sync:
          from: dist/browser
          to: 's3://tbg-production-donate-static/d'
          arguments: '--acl public-read --cache-control "max-age=31536000"'

      - aws-s3/sync:
          from: dist/browser/assets
          to: 's3://tbg-production-donate-static/assets'
          arguments: '--acl public-read --cache-control "max-age=86400"'

  build-ecr:
    resource_class: large
    machine:
      enabled: true
      docker_layer_caching: true
    parameters:
      env:
        type: string
    steps:
      - aws-ecr/build_and_push_image:
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          # cache-from format is e.g. 123.dkr.ecr.eu-west-1.amazonaws.com/thebiggive-donate:staging
          extra_build_args: '--build-arg BUILD_ENV=<< parameters.env >> --build-arg FONTAWESOME_NPM_AUTH_TOKEN=${FONTAWESOME_NPM_AUTH_TOKEN} --cache-from "${AWS_ECR_ACCOUNT_URL}/${AWS_ECR_REPO_NAME}:<< parameters.env >>"'
          repo: '${AWS_ECR_REPO_NAME}'
          region: '${AWS_REGION}'
          tag: '<< parameters.env >>,<< parameters.env >>-${CIRCLE_SHA1}'

  copy-ecr-static-to-s3:
    parameters:
      env:
        type: string
    docker:
      - image: "${AWS_ECR_ACCOUNT_URL}/${AWS_ECR_REPO_NAME}:<< parameters.env >>-${CIRCLE_SHA1}"
    steps:
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
      - aws-s3/sync:
          name: "Sync dist/browser to S3 with 1 year lifetime"
          from: /usr/src/app/dist/browser
          to: 's3://tbg-<< parameters.env >>-donate-static/d'
          arguments: '--acl public-read --cache-control "max-age=31536000"'

      - aws-s3/sync:
          name: "Sync dist/browser/assets to S3 with 1 day lifetime"
          from: /usr/src/app/dist/browser/assets
          to: 's3://tbg-<< parameters.env >>-donate-static/assets'
          arguments: '--acl public-read --cache-control "max-age=86400"'

workflows:
  commit:
    jobs:
      - test:
          context:
            - docker-hub-creds
            - jira
          post-steps:
            - jira/notify:
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>
                job_type: build
                environment_type: development

  deploy-regression:
    jobs:
      - deploy-regression-static:
          filters:
            branches:
              only:
                - develop
          context:
            - docker-hub-creds
            - ecs-deploys # Includes AWS_REGION
      - build-ecr:
          env: regression
          name: "Build Regression ECR image"
          context:
            - docker-hub-creds
            - ecs-deploys
            - slack
          requires:
            - deploy-regression-static
          post-steps:
            - slack/notify:
                channel: deployments, regression-alarms
                event: fail
                template: basic_fail_1
                mentions: <@here>
      - aws-ecs/deploy_service_update:
          name: "Deploy Regression ECS with new image"
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          context:
            - ecs-deploys
            - slack
          requires:
            - "Build Regression ECR image"
          region: AWS_REGION
          family: 'tbg-regression-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX}'
          cluster: 'tbg-regression-${AWS_REGION}'
          container_image_name_updates: 'container=donate,tag=regression-${CIRCLE_SHA1}'
          post-steps:
            - slack/notify:
                channel: deployments, regression-alarms
                event: fail
                template: basic_fail_1
                mentions: <@here>

  deploy-staging:
    jobs:
      - build-ecr:
          filters:
            branches:
              only:
                - develop
                - DON-1073-static-copy-from-ecr
          env: staging
          name: "Build Staging ECR image"
          context:
            - docker-hub-creds
            - ecs-deploys
            - slack
          post-steps:
            - slack/notify:
                channel: deployments, staging-alarms
                event: fail
                template: basic_fail_1
                mentions: <@here>
      - copy-ecr-static-to-s3:
          env: staging
          name: "Copy Staging ECR static to S3"
          requires: ["Build Staging ECR image"]
          context:
            - ecs-deploys
            - slack
          post-steps:
            - slack/notify:
                channel: deployments, staging-alarms
                event: fail
                template: basic_fail_1
                mentions: <@here>
      - aws-ecs/deploy_service_update:
          name: "Deploy Staging ECS with new image"
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          context:
            - ecs-deploys
            - jira
            - slack
          requires: ["Copy Staging ECR static to S3"]
          region: AWS_REGION
          family: 'tbg-staging-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX}'
          cluster: 'tbg-staging-${AWS_REGION}'
          container_image_name_updates: 'container=donate,tag=staging-${CIRCLE_SHA1}'
          post-steps:
            - jira/notify:
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>
                job_type: deployment
                environment: Staging
                environment_type: staging
            - slack/notify:
                channel: deployments
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Staging: Donate frontend deployed!* All visitors should see the updated app version within 30 minutes."
                          }
                        ]
                      }
                    ]
                  }
            - slack/notify:
                channel: deployments, staging-alarms,
                event: fail
                template: basic_fail_1
                mentions: <@here>

  deploy-production:
    jobs:
      - deploy-production-static:
          filters:
            branches:
              only:
                - main
          context:
            - docker-hub-creds
            - ecs-deploys # Includes AWS_REGION
      - build-ecr:
          env: production
          name: "Build Production ECR image"
          context:
            - docker-hub-creds
            - ecs-deploys
            - slack
          requires:
            - deploy-production-static
          post-steps:
            - slack/notify:
                channel: deployments, production-alarms
                event: fail
                template: basic_fail_1
                mentions: <@here>
      - aws-ecs/deploy_service_update:
          name: "Deploy Production ECS with new image"
          auth:
            - aws-cli/setup:
                aws_access_key_id: AWS_ACCESS_KEY_ID
                aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          context:
            - ecs-deploys
            - jira
            - slack
          requires:
            - "Build Production ECR image"
          region: AWS_REGION
          family: 'tbg-production-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX}'
          cluster: 'tbg-production-${AWS_REGION}'
          container_image_name_updates: "container=donate,tag=production-${CIRCLE_SHA1}"
          post-steps:
            - jira/notify:
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>
                job_type: deployment
                environment: Production
                environment_type: production
            - slack/notify:
                channel: deployments
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Production: Donate frontend deployed!* All visitors should see the updated app version within 30 minutes."
                          }
                        ]
                      }
                    ]
                  }
            - slack/notify:
                event: fail
                channel: deployments, production-alarms
                template: basic_fail_1
