version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.1.3
  aws-ecs: circleci/aws-ecs@3.2.0
  aws-s3: circleci/aws-s3@3.0.0
  browser-tools: circleci/browser-tools@1.4.4
  jira: circleci/jira@1.3.1
  slack: circleci/slack@4.12.5

jobs:
  test:
    docker:
      - image: cimg/node:16.18-browsers
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN

    working_directory: ~/donate

    steps:
      # https://stackoverflow.com/a/75738251/2803757 â€“ this lib's required for Chrome 111+
      # and not in the current base image.
      - run: |
          cd /tmp;
          wget http://archive.ubuntu.com/ubuntu/pool/main/libu/libu2f-host/libu2f-udev_1.1.4-1_all.deb;
          sudo dpkg -i libu2f-udev_1.1.4-1_all.deb;
          cd ~/donate
      - browser-tools/install-chrome:
          chrome-version: 116.0.5845.96 # https://github.com/puppeteer/puppeteer/blob/main/versions.js
      - browser-tools/install-chromedriver

      - checkout

      - restore_cache:
          keys:
            - v5-dependencies-with-chrome-{{ checksum "package-lock.json" }}

      - run: npm install --quiet

      - save_cache:
          paths:
            - node_modules
            - /home/circleci/.cache/Cypress
            - /home/circleci/.cache/puppeteer
          key: v5-dependencies-with-chrome-{{ checksum "package-lock.json" }}

      - run: npm run ci

      - store_artifacts:
          path: cypress/screenshots

  deploy-staging-static:
    docker:
      # This image's base Node version must match that used in `Dockerfile`, which is the basis for ECS app
      # builds. Otherwise the two builds will have different output hashes and the dynamic app will reference
      # static files that don't exist.
      - image: node:16.18
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN

    # This must also match `Dockerfile` to avoid risking out of sync static + ECS builds.
    working_directory: /usr/src/app

    steps:
      - checkout

      - restore_cache:
          keys:
            - v5-dependencies-{{ checksum "package-lock.json" }}
      - run: npm config set puppeteer_skip_chromium_download true
      - run: npm install --quiet
      - save_cache:
          paths:
            - node_modules
            - /home/circleci/.cache/Cypress
            - /home/circleci/.cache/puppeteer
          key: v5-dependencies-{{ checksum "package-lock.json" }}

      - run: npm run build:staging

      - aws-s3/sync:
          from: dist/browser
          to: 's3://tbg-staging-donate-static/d'
          arguments: |
            --acl public-read \
            --cache-control "max-age=31536000"

      - aws-s3/sync:
          from: dist/browser/assets
          to: 's3://tbg-staging-donate-static/assets'
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"

  deploy-regression-static:
    docker:
      # This image's base Node version must match that used in `Dockerfile`, which is the basis for ECS app
      # builds. Otherwise the two builds will have different output hashes and the dynamic app will reference
      # static files that don't exist.
      - image: node:16.18
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN

    # This must also match `Dockerfile` to avoid risking out of sync static + ECS builds.
    working_directory: /usr/src/app

    steps:
      - checkout

      - restore_cache:
          keys:
            - v5-dependencies-{{ checksum "package-lock.json" }}
      - run: npm config set puppeteer_skip_chromium_download true
      - run: npm install --quiet
      - save_cache:
          paths:
            - node_modules
            - /home/circleci/.cache/Cypress
            - /home/circleci/.cache/puppeteer
          key: v5-dependencies-{{ checksum "package-lock.json" }}

      - run: npm run build:regression

      - aws-s3/sync:
          from: dist/browser
          to: 's3://tbg-regression-donate-static/d'
          arguments: |
            --acl public-read \
            --cache-control "max-age=31536000"

      - aws-s3/sync:
          from: dist/browser/assets
          to: 's3://tbg-regression-donate-static/assets'
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"

  deploy-production-static:
    docker:
      # This image's base Node version must match that used in `Dockerfile`, which is the basis for ECS app
      # builds. Otherwise the two builds will have different output hashes and the dynamic app will reference
      # static files that don't exist.
      - image: node:16.18
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN

    # This must also match `Dockerfile` to avoid risking out of sync static + ECS builds.
    working_directory: /usr/src/app

    steps:
      - checkout

      - restore_cache:
          keys:
            - v5-dependencies-{{ checksum "package-lock.json" }}
      - run: npm config set puppeteer_skip_chromium_download true
      - run: npm install --quiet
      - save_cache:
          paths:
            - node_modules
            - /home/circleci/.cache/Cypress
            - /home/circleci/.cache/puppeteer
          key: v5-dependencies-{{ checksum "package-lock.json" }}

      - run: npm run build:production

      - aws-s3/sync:
          from: dist/browser
          to: 's3://tbg-production-donate-static/d'
          arguments: |
            --acl public-read \
            --cache-control "max-age=31536000"

      - aws-s3/sync:
          from: dist/browser/assets
          to: 's3://tbg-production-donate-static/assets'
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"

  build-ecr:
    machine:
      enabled: true
      docker_layer_caching: true
    parameters:
      env:
        type: string
    steps:
      - aws-ecr/build-and-push-image:
          # cache-from format is e.g. 123.dkr.ecr.eu-west-1.amazonaws.com/thebiggive-donate:staging
          extra-build-args: '--build-arg BUILD_ENV=<< parameters.env >> --build-arg FONTAWESOME_NPM_AUTH_TOKEN=${FONTAWESOME_NPM_AUTH_TOKEN} --cache-from "${AWS_ECR_ACCOUNT_URL}/${AWS_ECR_REPO_NAME}:<< parameters.env >>"'
          repo: '${AWS_ECR_REPO_NAME}'
          region: '${AWS_REGION}'
          tag: '<< parameters.env >>,<< parameters.env >>-${CIRCLE_SHA1}'

workflows:
  commit:
    jobs:
      - test:
          context:
            - docker-hub-creds
            - jira
          post-steps:
            - jira/notify:
                job_type: build
                environment_type: development

  deploy-regression:
    jobs:
      - deploy-regression-static:
          filters:
            branches:
              only:
                - develop
          context:
            - docker-hub-creds
            - ecs-deploys # Includes AWS_REGION
      - build-ecr:
          env: regression
          name: "Build Regression ECR image"
          context:
            - docker-hub-creds
            - ecs-deploys
          requires:
            - deploy-regression-static
      - aws-ecs/deploy-service-update:
          name: "Deploy Regression ECS with new image"
          context:
            - ecs-deploys
            - slack
          requires:
            - "Build Regression ECR image"
          aws-region: AWS_REGION
          family: 'tbg-regression-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX}'
          cluster: 'tbg-regression-${AWS_REGION}'
          container-image-name-updates: 'container=donate,tag=regression-${CIRCLE_SHA1}'
          post-steps:
            - slack/notify:
                event: fail
                template: basic_fail_1

  deploy-staging:
    jobs:
      - deploy-staging-static:
          filters:
            branches:
              only:
                - develop
          context:
            - docker-hub-creds
            - ecs-deploys # Includes AWS_REGION
      - build-ecr:
          env: staging
          name: "Build Staging ECR image"
          context:
            - docker-hub-creds
            - ecs-deploys
          requires:
            - deploy-staging-static
      - aws-ecs/deploy-service-update:
          name: "Deploy Staging ECS with new image"
          context:
            - ecs-deploys
            - jira
            - slack
          requires:
            - "Build Staging ECR image"
          aws-region: AWS_REGION
          family: 'tbg-staging-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX}'
          cluster: 'tbg-staging-${AWS_REGION}'
          container-image-name-updates: 'container=donate,tag=staging-${CIRCLE_SHA1}'
          post-steps:
            - jira/notify:
                job_type: deployment
                environment_type: staging
            - slack/notify:
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Staging: Donate frontend deployed!* All visitors should see the updated app version within 30 minutes."
                          }
                        ]
                      }
                    ]
                  }
            - slack/notify:
                event: fail
                template: basic_fail_1

  deploy-production:
    jobs:
      - deploy-production-static:
          filters:
            branches:
              only:
                - main
          context:
            - docker-hub-creds
            - ecs-deploys # Includes AWS_REGION
      - build-ecr:
          env: production
          name: "Build Production ECR image"
          context:
            - docker-hub-creds
            - ecs-deploys
          requires:
            - deploy-production-static
      - aws-ecs/deploy-service-update:
          name: "Deploy Production ECS with new image"
          context:
            - ecs-deploys
            - jira
            - slack
          requires:
            - "Build Production ECR image"
          aws-region: AWS_REGION
          family: 'tbg-production-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX}'
          cluster: 'tbg-production-${AWS_REGION}'
          container-image-name-updates: "container=donate,tag=production-${CIRCLE_SHA1}"
          post-steps:
            - jira/notify:
                job_type: deployment
                environment_type: production
            - slack/notify:
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Production: Donate frontend deployed!* All visitors should see the updated app version within 30 minutes."
                          }
                        ]
                      }
                    ]
                  }
            - slack/notify:
                event: fail
                template: basic_fail_1
